import logging
from aiogram import Bot, Dispatcher, executor, types
from calendar_api import create_event
from nlp_parser import extract_task_info
from config import TELEGRAM_BOT_TOKEN
import datetime

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –∏ —è —Å–æ–∑–¥–∞–º –µ—ë –≤ —Ç–≤–æ—ë–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.\n–ü—Ä–∏–º–µ—Ä: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –í–∞—Å–µ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00' üìÖ")

@dp.message_handler()
async def handle_task(message: types.Message):
    text = message.text
    task_text, task_datetime = extract_task_info(text)

    if not task_datetime:
        await message.reply("‚ùå –Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å.")
        return

    event_link = create_event(task_text, task_datetime)
    await message.reply(f"‚úÖ –ó–∞–¥–∞—á–∞ **{task_text}** —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ {task_datetime.strftime('%d.%m.%Y %H:%M')}!\n\n[–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ]({event_link})", parse_mode="Markdown")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)